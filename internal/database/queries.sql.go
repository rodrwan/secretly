// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
)

const createEnvironment = `-- name: CreateEnvironment :one
INSERT INTO environment (name) VALUES (?)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateEnvironment(ctx context.Context, name string) (Environment, error) {
	row := q.db.QueryRowContext(ctx, createEnvironment, name)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createValue = `-- name: CreateValue :one
INSERT INTO environment_values (environment_id, key, value) VALUES (?, ?, ?)
RETURNING id, environment_id, "key", value, created_at, updated_at
`

type CreateValueParams struct {
	EnvironmentID int64  `db:"environment_id" json:"environment_id"`
	Key           string `db:"key" json:"key"`
	Value         string `db:"value" json:"value"`
}

func (q *Queries) CreateValue(ctx context.Context, arg CreateValueParams) (EnvironmentValue, error) {
	row := q.db.QueryRowContext(ctx, createValue, arg.EnvironmentID, arg.Key, arg.Value)
	var i EnvironmentValue
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEnvironment = `-- name: DeleteEnvironment :exec
DELETE FROM environment WHERE id = ?
`

func (q *Queries) DeleteEnvironment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnvironment, id)
	return err
}

const deleteValue = `-- name: DeleteValue :exec
DELETE FROM environment_values WHERE id = ?
`

func (q *Queries) DeleteValue(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteValue, id)
	return err
}

const getAllEnvironments = `-- name: GetAllEnvironments :many
SELECT id, name, created_at, updated_at FROM environment
`

func (q *Queries) GetAllEnvironments(ctx context.Context) ([]Environment, error) {
	rows, err := q.db.QueryContext(ctx, getAllEnvironments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllValues = `-- name: GetAllValues :many
SELECT id, environment_id, "key", value, created_at, updated_at FROM environment_values
`

func (q *Queries) GetAllValues(ctx context.Context) ([]EnvironmentValue, error) {
	rows, err := q.db.QueryContext(ctx, getAllValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvironmentValue
	for rows.Next() {
		var i EnvironmentValue
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnvironment = `-- name: GetEnvironment :one
SELECT id, name, created_at, updated_at FROM environment WHERE id = ? LIMIT 1
`

func (q *Queries) GetEnvironment(ctx context.Context, id int64) (Environment, error) {
	row := q.db.QueryRowContext(ctx, getEnvironment, id)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnvironmentByName = `-- name: GetEnvironmentByName :one
SELECT id, name, created_at, updated_at FROM environment WHERE name = ? LIMIT 1
`

func (q *Queries) GetEnvironmentByName(ctx context.Context, name string) (Environment, error) {
	row := q.db.QueryRowContext(ctx, getEnvironmentByName, name)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getValue = `-- name: GetValue :one
SELECT id, environment_id, "key", value, created_at, updated_at FROM environment_values WHERE id = ? LIMIT 1
`

func (q *Queries) GetValue(ctx context.Context, id int64) (EnvironmentValue, error) {
	row := q.db.QueryRowContext(ctx, getValue, id)
	var i EnvironmentValue
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getValueByKey = `-- name: GetValueByKey :one
SELECT id, environment_id, "key", value, created_at, updated_at FROM environment_values WHERE environment_id = ? AND key = ? LIMIT 1
`

type GetValueByKeyParams struct {
	EnvironmentID int64  `db:"environment_id" json:"environment_id"`
	Key           string `db:"key" json:"key"`
}

func (q *Queries) GetValueByKey(ctx context.Context, arg GetValueByKeyParams) (EnvironmentValue, error) {
	row := q.db.QueryRowContext(ctx, getValueByKey, arg.EnvironmentID, arg.Key)
	var i EnvironmentValue
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getValuesByEnvironmentID = `-- name: GetValuesByEnvironmentID :many
SELECT id, environment_id, "key", value, created_at, updated_at FROM environment_values WHERE environment_id = ?
`

func (q *Queries) GetValuesByEnvironmentID(ctx context.Context, environmentID int64) ([]EnvironmentValue, error) {
	rows, err := q.db.QueryContext(ctx, getValuesByEnvironmentID, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvironmentValue
	for rows.Next() {
		var i EnvironmentValue
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValue = `-- name: UpdateValue :one
UPDATE environment_values SET value = ? WHERE id = ? RETURNING id, environment_id, "key", value, created_at, updated_at
`

type UpdateValueParams struct {
	Value string `db:"value" json:"value"`
	ID    int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateValue(ctx context.Context, arg UpdateValueParams) (EnvironmentValue, error) {
	row := q.db.QueryRowContext(ctx, updateValue, arg.Value, arg.ID)
	var i EnvironmentValue
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
